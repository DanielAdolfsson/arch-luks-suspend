#!/bin/bash

################################################################################
## Parameters and helper functions

INITRAMFS_DIR=/run/initramfs
SYSTEM_SLEEP_PATH=/usr/lib/systemd/system-sleep
BIND_PATHS=(/sys /proc /dev /run)
REMOUNT=0
# Retrieve cryptdevice name from boot cmdline
CRYPTNAME="$(sed -n 's/.*cryptdevice=[^: ]*:\([^: ]*\).*$/\1/p' /proc/cmdline)"

panic() { while :; do echo o > /proc/sysrq-trigger; done }

# Shutdown on script errors
set -e -E -u
trap panic ERR

# run_dir DIR ARGS...
# Run all executable scripts in directory DIR with arguments ARGS
run_dir() {
    local dir=$1
    shift
    find "${dir}" -type f -executable -exec "{}" "$@" ";"
}

mount_initramfs() {
    local p
    for p in "${BIND_PATHS[@]}"; do
        mount -o bind "${p}" "${INITRAMFS_DIR}${p}"
    done
}

umount_initramfs() {
    local p
    for p in "${BIND_PATHS[@]}"; do
        ! mountpoint -q "${INITRAMFS_DIR}${p}" || umount "${INITRAMFS_DIR}${p}"
    done
}

find_blocking_filesystems() {
    local cryptname="$1"
    local p
    for p in $(lsblk -nro PATH,FSTYPE "/dev/mapper/${cryptname}" | awk '/ext[34]$/ {print $1}'); do
        local mt="$(grep "^${p} " /proc/mounts | cut -d ' ' -f 4)"
        if ! [[ "$mt" == *nobarrier* || "$mt" == *barrier=0* ]]; then
            echo "$p"
        fi
    done
}

remount_blocking_filesystems() {
    local opts="$1" devices="${@:2}"
    local dev
    for dev in $devices; do
        mount -o remount,$opts $dev
    done
}

# Stop udev service and prevent it to be autostarted.
# Otherwise, luksResume will hang waiting for udev, which is itself waiting
# for I/O on the root device.
udev_service() {
    systemctl "$1" systemd-udevd-control.socket
    systemctl "$1" systemd-udevd-kernel.socket
    systemctl "$1" systemd-udevd.service
}

# Prevent journald from attempting to write to the suspended device
journald_service() {
    systemctl "$1" systemd-journald-dev-log.socket
    systemctl "$1" systemd-journald.socket
    systemctl "$1" systemd-journald.service
}

################################################################################
## Main script

[[ -x "${INITRAMFS_DIR}/suspend" ]] || panic

# Prepare chroot
trap umount_initramfs EXIT
mount_initramfs

# Run pre-suspend scripts
run_dir "${SYSTEM_SLEEP_PATH}" pre suspend

# Stop services that may block suspend
udev_service stop
journald_service stop

# Journalled ext4 filesystems in kernel versions 3.11+ will block suspend
# if mounted with `barrier=1`, which is the default. Temporarily remount with
# `barrier=0` if this is true of any filesystems on the crypt device.
BLOCKING_DEVICES=$(find_blocking_filesystems "$CRYPTNAME")
remount_blocking_filesystems "barrier=0" "$BLOCKING_DEVICES"

# Hand over execution to script inside initramfs
cd "${INITRAMFS_DIR}"
chroot . /suspend "$CRYPTNAME"

# Restore original mount options
remount_blocking_filesystems "barrier=1" "$BLOCKING_DEVICES"

# Restart stopped services
journald_service start
udev_service start

# Run post-suspend scripts
run_dir "${SYSTEM_SLEEP_PATH}" post suspend

# Unlock user sessions
loginctl unlock-sessions
